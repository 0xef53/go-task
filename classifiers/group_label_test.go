package classifiers

import (
	"context"
	"errors"
	"fmt"
	"testing"

	test_utils "github.com/0xef53/go-task/internal/testing"
)

func TestGroupLabelClassifier_Assign_ArgsValidation(t *testing.T) {
	format := test_utils.FormatResultString

	cls := NewGroupLabelClassifier()

	ctx := context.Background()

	testArgs := map[string]struct {
		tid     string
		opts    *GroupLabelOptions
		wantErr error
	}{
		"empty task-id": {"", &GroupLabelOptions{Label: "group-1"}, ErrValidationFailed},
		"empty label":   {"", &GroupLabelOptions{Label: ""}, ErrValidationFailed},
		"nil opts":      {"", nil, ErrValidationFailed},
		"correct args":  {"task-id:123", &GroupLabelOptions{Label: "group-777"}, nil},
	}

	for name, args := range testArgs {
		if err := cls.Assign(ctx, args.opts, args.tid); err != nil {
			if !errors.Is(err, args.wantErr) {
				t.Fatal(format(args.wantErr, err, name))
			}
		} else {
			cls.Unassign(args.tid)
		}
	}
}

func TestGroupLabelClassifier_Assign_Duplicates(t *testing.T) {
	format := test_utils.FormatResultString

	cls := NewGroupLabelClassifier()

	ctx := context.Background()

	cls.Assign(ctx, &GroupLabelOptions{Label: "group-1"}, "task-id:1.1")
	cls.Assign(ctx, &GroupLabelOptions{Label: "group-2"}, "task-id:2.1")
	cls.Assign(ctx, &GroupLabelOptions{Label: "group-3"}, "task-id:3.1")
	cls.Assign(ctx, &GroupLabelOptions{Label: "group-3"}, "task-id:3.2")

	// Duplicate
	if err := cls.Assign(ctx, &UniqueLabelOptions{Label: "group-3"}, "task-id:3.2"); !errors.Is(err, ErrAssignmentFailed) {
		t.Fatal(format(ErrAssignmentFailed, err))
	}
}

func TestGroupLabelClassifier_Unassign(t *testing.T) {
	format := test_utils.FormatResultString

	cls := NewGroupLabelClassifier()

	ctx := context.Background()

	autogeneratedCount := 10000

	for i := 0; i < autogeneratedCount; i++ {
		cls.Assign(ctx, &GroupLabelOptions{Label: "group-1"}, fmt.Sprintf("task-id:1.%d", i))
	}

	for i := 0; i < autogeneratedCount; i++ {
		cls.Assign(ctx, &GroupLabelOptions{Label: "group-2"}, fmt.Sprintf("task-id:2.%d", i))
	}

	for i := 0; i < autogeneratedCount; i++ {
		cls.Assign(ctx, &GroupLabelOptions{Label: "group-3"}, fmt.Sprintf("task-id:3.%d", i))
	}

	// Remove all from group-1
	for i := 0; i < autogeneratedCount; i++ {
		cls.Unassign(fmt.Sprintf("task-id:1.%d", i))
	}

	if tasks := cls.Get("group-1"); len(tasks) > 0 {
		t.Fatal(format("0 autogenerated items", fmt.Sprintf("%d items", len(tasks)), "Empty group-1"))
	}

	// Remove each even element from group-2
	for i := 0; i < autogeneratedCount; i++ {
		if i%2 == 0 {
			cls.Unassign(fmt.Sprintf("task-id:2.%d", i))
		}
	}

	if tasks := cls.Get("group-2"); len(tasks) != autogeneratedCount/2 {
		t.Fatal(format(fmt.Sprintf("%d autogenerated items", autogeneratedCount/2), fmt.Sprintf("%d items", len(tasks)), "Even elements in group-2"))
	}

	// Remove all but not the first from group-3
	for i := 1; i < autogeneratedCount; i++ {
		cls.Unassign(fmt.Sprintf("task-id:3.%d", i))
	}

	if tasks := cls.Get("group-3"); len(tasks) > 1 {
		t.Fatal(format("1 autogenerated items", fmt.Sprintf("%d items", len(tasks)), "First element in group-3"))
	}

	// Check group label count
	if n := cls.Len(); n != 2 {
		t.Fatal(format("2 group", fmt.Sprintf("%d group(s)", n), "Total groups"))
	}

	// Check total task count
	if tasks := cls.Get("group-1", "group-2", "group-3"); len(tasks) != autogeneratedCount/2+10 {
		t.Fatal(format(fmt.Sprintf("%d autogenerated items", autogeneratedCount/2+1), fmt.Sprintf("%d items", len(tasks)), "Total tasks"))
	}
}

func TestGroupLabelClassifier_Get(t *testing.T) {
	format := test_utils.FormatResultString

	cls := NewGroupLabelClassifier()

	ctx := context.Background()

	autogeneratedCount := 10000

	for i := 0; i < autogeneratedCount; i++ {
		cls.Assign(ctx, &GroupLabelOptions{Label: "group-1"}, fmt.Sprintf("task-id:1.%d", i))
	}

	for i := 0; i < autogeneratedCount; i++ {
		cls.Assign(ctx, &GroupLabelOptions{Label: "group-2"}, fmt.Sprintf("task-id:2.%d", i))
	}

	for i := 0; i < autogeneratedCount; i++ {
		cls.Assign(ctx, &GroupLabelOptions{Label: "group-3"}, fmt.Sprintf("task-id:3.%d", i))
	}

	tasks := cls.Get("group-1", "group-2", "aaa-2", "aaa-3", "aaa-4")

	if n := len(tasks); n != autogeneratedCount*2 {
		t.Fatal(format(fmt.Sprintf("%d autogenerated items", autogeneratedCount*2), fmt.Sprintf("%d items", len(tasks)), "Total tasks"))
	}
}
