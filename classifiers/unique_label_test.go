package classifiers

import (
	"context"
	"errors"
	"fmt"
	"testing"

	test_utils "github.com/0xef53/go-task/internal/testing"

	"github.com/google/uuid"
)

func TestUniqueLabelClassifier_Assign_ArgsValidation(t *testing.T) {
	format := test_utils.FormatResultString

	cls := NewUniqueLabelClassifier()

	ctx := context.Background()

	testArgs := map[string]struct {
		tid     string
		opts    *UniqueLabelOptions
		wantErr error
	}{
		"empty task-id": {"", &UniqueLabelOptions{Label: "bbb-1"}, ErrValidationFailed},
		"empty label":   {"", &UniqueLabelOptions{Label: ""}, ErrValidationFailed},
		"nil opts":      {"", nil, ErrValidationFailed},
		"correct args":  {"task-id:123", &UniqueLabelOptions{Label: "aaa-123"}, nil},
	}

	for name, args := range testArgs {
		if err := cls.Assign(ctx, args.opts, args.tid); err != nil {
			if !errors.Is(err, args.wantErr) {
				t.Fatal(format(args.wantErr, err, name))
			}
		} else {
			cls.Unassign(args.tid)
		}
	}
}

func TestUniqueLabelClassifier_Assign_Duplicates(t *testing.T) {
	format := test_utils.FormatResultString

	cls := NewUniqueLabelClassifier()

	ctx := context.Background()

	cls.Assign(ctx, &UniqueLabelOptions{Label: "aaa-1"}, "task-id:1")
	cls.Assign(ctx, &UniqueLabelOptions{Label: "aaa-2"}, "task-id:2")
	cls.Assign(ctx, &UniqueLabelOptions{Label: "aaa-3"}, "task-id:3")

	if err := cls.Assign(ctx, &UniqueLabelOptions{Label: "aaa-2"}, uuid.New().String()); !errors.Is(err, ErrAssignmentFailed) {
		t.Fatal(format(ErrAssignmentFailed, err))
	}
}

func TestUniqueLabelClassifier_Unassign(t *testing.T) {
	format := test_utils.FormatResultString

	cls := NewUniqueLabelClassifier()

	ctx := context.Background()

	autogeneratedCount := 100

	for i := 0; i < autogeneratedCount; i++ {
		cls.Assign(ctx, &UniqueLabelOptions{Label: fmt.Sprintf("aaa-%d", i)}, fmt.Sprintf("task-aaa-%d", i))
	}

	for i := 0; i < autogeneratedCount-1; i++ {
		cls.Unassign(fmt.Sprintf("task-aaa-%d", i))
	}

	if n := cls.Len(); n != 1 {
		t.Fatal(format("1 autogenerated item", fmt.Sprintf("%d items", n), "Autogenerated items"))
	}
}

func TestUniqueLabelClassifier_Get(t *testing.T) {
	format := test_utils.FormatResultString

	cls := NewUniqueLabelClassifier()

	ctx := context.Background()

	cls.Assign(ctx, &UniqueLabelOptions{Label: "aaa-1"}, "task-id:1")
	cls.Assign(ctx, &UniqueLabelOptions{Label: "aaa-2"}, "task-id:2")
	cls.Assign(ctx, &UniqueLabelOptions{Label: "aaa-3"}, "task-id:3")

	tasks := cls.Get("aaa-2", "aaa-3", "aaa-4")

	if n := len(tasks); n != 2 {
		t.Fatal(format("1 autogenerated item", fmt.Sprintf("%d items", n)))
	}
}
