package classifiers

import (
	"context"
	"errors"
	"fmt"
	"testing"
	"time"

	test_utils "github.com/0xef53/go-task/internal/testing"
)

func TestLimitedGroupClassifier_Assign_ArgsValidation(t *testing.T) {
	format := test_utils.FormatResultString

	cls := NewLimitedGroupClassifier("group-123", 4, 6*time.Second)

	ctx := context.Background()

	testArgs := map[string]struct {
		tid     string
		opts    *LimitedGroupOptions
		wantErr error
	}{
		"empty task-id": {"", new(LimitedGroupOptions), ErrValidationFailed},
		"empty label":   {"", new(LimitedGroupOptions), ErrValidationFailed},
		"nil opts":      {"", nil, ErrValidationFailed},
		"correct args":  {"task-id:123", new(LimitedGroupOptions), nil},
	}

	for name, args := range testArgs {
		if err := cls.Assign(ctx, args.opts, args.tid); err != nil {
			if !errors.Is(err, args.wantErr) {
				t.Fatal(format(args.wantErr, err, name))
			}
		} else {
			cls.Unassign(args.tid)
		}
	}
}

func TestLimitedGroupClassifier_Assign_WaitingBeforeAssigning(t *testing.T) {
	format := test_utils.FormatResultString

	cls := NewLimitedGroupClassifier("group-123", 4, 6*time.Second)

	ctx := context.Background()

	cls.Assign(ctx, new(LimitedGroupOptions), "task-id:1")
	cls.Assign(ctx, new(LimitedGroupOptions), "task-id:2")
	cls.Assign(ctx, new(LimitedGroupOptions), "task-id:3")

	cls.Assign(ctx, new(LimitedGroupOptions), "task-id:4")

	go func() {
		time.Sleep(2 * time.Second)

		cls.Unassign("task-id:4")
	}()

	if err := cls.Assign(ctx, new(LimitedGroupOptions), "task-id:5"); err != nil {
		t.Fatal(format(nil, err))
	} else {
		cls.Unassign("task-id:5")
	}
}

func TestLimitedGroupClassifier_Assign_TimeoutWhenAssigning(t *testing.T) {
	format := test_utils.FormatResultString

	cls := NewLimitedGroupClassifier("group-123", 4, 6*time.Second)

	ctx := context.Background()

	cls.Assign(ctx, new(LimitedGroupOptions), "task-id:1")
	cls.Assign(ctx, new(LimitedGroupOptions), "task-id:2")
	cls.Assign(ctx, new(LimitedGroupOptions), "task-id:3")

	cls.Assign(ctx, new(LimitedGroupOptions), "task-id:4")

	go func() {
		time.Sleep(7 * time.Second)

		cls.Unassign("task-id:4")
	}()

	if err := cls.Assign(ctx, new(LimitedGroupOptions), "task-id:5"); !errors.Is(err, ErrAssignmentTimeout) {
		t.Fatal(format(ErrAssignmentTimeout, err))
	}
}

func TestLimitedGroupClassifier_Assign_ContextTimeoutWhenAssigning(t *testing.T) {
	format := test_utils.FormatResultString

	cls := NewLimitedGroupClassifier("group-123", 4, 6*time.Second)

	ctx := context.Background()

	cls.Assign(ctx, new(LimitedGroupOptions), "task-id:1")
	cls.Assign(ctx, new(LimitedGroupOptions), "task-id:2")
	cls.Assign(ctx, new(LimitedGroupOptions), "task-id:3")

	cls.Assign(ctx, new(LimitedGroupOptions), "task-id:4")

	go func() {
		time.Sleep(4 * time.Second)

		cls.Unassign("task-id:4")
	}()

	timeoutCtx, cancel := context.WithTimeout(ctx, 2*time.Second)
	defer cancel()

	if err := cls.Assign(timeoutCtx, new(LimitedGroupOptions), "task-id:5"); !errors.Is(err, context.DeadlineExceeded) {
		t.Fatal(format(context.DeadlineExceeded, err))
	}
}

func TestLimitedGroupClassifier_Unassign(t *testing.T) {
	format := test_utils.FormatResultString

	autogeneratedCount := 100

	cls := NewLimitedGroupClassifier("group-123", uint16(autogeneratedCount), 2*time.Second)

	ctx := context.Background()

	for i := 0; i < autogeneratedCount; i++ {
		cls.Assign(ctx, new(LimitedGroupOptions), fmt.Sprintf("task-id:%d", i))
	}

	for i := 0; i < autogeneratedCount-1; i++ {
		cls.Unassign(fmt.Sprintf("task-id:%d", i))
	}

	if n := cls.Len(); n != 1 {
		t.Fatal(format("1 autogenerated item", fmt.Sprintf("%d items", n)))
	}
}

func TestLimitedGroupClassifier_Get(t *testing.T) {
	format := test_utils.FormatResultString

	cls := NewLimitedGroupClassifier("group-123", 4, 0)

	ctx := context.Background()

	cls.Assign(ctx, new(LimitedGroupOptions), "task-id:1")
	cls.Assign(ctx, new(LimitedGroupOptions), "task-id:2")
	cls.Assign(ctx, new(LimitedGroupOptions), "task-id:3")

	tasks := cls.Get("aaa-2", "aaa-3", "group-123")

	if n := len(tasks); n != 3 {
		t.Fatal(format("1 autogenerated item", fmt.Sprintf("%d items", n)))
	}
}
